// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppUsage app usage
//
// swagger:model AppUsage
type AppUsage struct {

	// app name
	// Example: Telegram
	AppName string `json:"appName,omitempty"`

	// app package name
	// Example: com.example.telegram
	AppPackageName string `json:"appPackageName,omitempty"`

	// created at
	// Example: 2009-05-08 14:40:52,531
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// date of use
	// Example: 24-04-1997
	// Format: date
	DateOfUse strfmt.Date `json:"dateOfUse,omitempty"`

	// Usage time in seconds.
	TimeDuration int64 `json:"timeDuration,omitempty"`
}

// Validate validates this app usage
func (m *AppUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfUse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppUsage) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppUsage) validateDateOfUse(formats strfmt.Registry) error {
	if swag.IsZero(m.DateOfUse) { // not required
		return nil
	}

	if err := validate.FormatOf("dateOfUse", "body", "date", m.DateOfUse.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this app usage based on context it is used
func (m *AppUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AppUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppUsage) UnmarshalBinary(b []byte) error {
	var res AppUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
