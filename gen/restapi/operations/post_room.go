// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/issue-one/offTime-rest-api/gen/models"
)

// PostRoomHandlerFunc turns a function with the right signature into a post room handler
type PostRoomHandlerFunc func(PostRoomParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRoomHandlerFunc) Handle(params PostRoomParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PostRoomHandler interface for that can handle valid post room params
type PostRoomHandler interface {
	Handle(PostRoomParams, *models.User) middleware.Responder
}

// NewPostRoom creates a new http.Handler for the post room operation
func NewPostRoom(ctx *middleware.Context, handler PostRoomHandler) *PostRoom {
	return &PostRoom{Context: ctx, Handler: handler}
}

/* PostRoom swagger:route POST /rooms postRoom

PostRoom post room API

*/
type PostRoom struct {
	Context *middleware.Context
	Handler PostRoomHandler
}

func (o *PostRoom) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostRoomParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostRoomBadRequestBody post room bad request body
//
// swagger:model PostRoomBadRequestBody
type PostRoomBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post room bad request body
func (o *PostRoomBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post room bad request body based on context it is used
func (o *PostRoomBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostRoomBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRoomBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostRoomBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostRoomBody post room body
//
// swagger:model PostRoomBody
type PostRoomBody struct {

	// room name
	// Required: true
	RoomName *string `json:"roomName"`
}

// Validate validates this post room body
func (o *PostRoomBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoomName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostRoomBody) validateRoomName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"roomName", "body", o.RoomName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post room body based on context it is used
func (o *PostRoomBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostRoomBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRoomBody) UnmarshalBinary(b []byte) error {
	var res PostRoomBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostRoomInternalServerErrorBody post room internal server error body
//
// swagger:model PostRoomInternalServerErrorBody
type PostRoomInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post room internal server error body
func (o *PostRoomInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post room internal server error body based on context it is used
func (o *PostRoomInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostRoomInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRoomInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostRoomInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostRoomNotFoundBody post room not found body
//
// swagger:model PostRoomNotFoundBody
type PostRoomNotFoundBody struct {

	// May be null.
	Entity string `json:"entity,omitempty"`

	// May be null.
	Identifer string `json:"identifer,omitempty"`
}

// Validate validates this post room not found body
func (o *PostRoomNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post room not found body based on context it is used
func (o *PostRoomNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostRoomNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRoomNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostRoomNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
