// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/issue-one/offTime-rest-api/gen/models"
)

// PutUserPictureHandlerFunc turns a function with the right signature into a put user picture handler
type PutUserPictureHandlerFunc func(PutUserPictureParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserPictureHandlerFunc) Handle(params PutUserPictureParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PutUserPictureHandler interface for that can handle valid put user picture params
type PutUserPictureHandler interface {
	Handle(PutUserPictureParams, *models.User) middleware.Responder
}

// NewPutUserPicture creates a new http.Handler for the put user picture operation
func NewPutUserPicture(ctx *middleware.Context, handler PutUserPictureHandler) *PutUserPicture {
	return &PutUserPicture{Context: ctx, Handler: handler}
}

/* PutUserPicture swagger:route PUT /users/{username}/picture putUserPicture

PutUserPicture put user picture API

*/
type PutUserPicture struct {
	Context *middleware.Context
	Handler PutUserPictureHandler
}

func (o *PutUserPicture) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserPictureParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutUserPictureBadRequestBody put user picture bad request body
//
// swagger:model PutUserPictureBadRequestBody
type PutUserPictureBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put user picture bad request body
func (o *PutUserPictureBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user picture bad request body based on context it is used
func (o *PutUserPictureBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserPictureBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserPictureBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutUserPictureBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutUserPictureInternalServerErrorBody put user picture internal server error body
//
// swagger:model PutUserPictureInternalServerErrorBody
type PutUserPictureInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put user picture internal server error body
func (o *PutUserPictureInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user picture internal server error body based on context it is used
func (o *PutUserPictureInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserPictureInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserPictureInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutUserPictureInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutUserPictureNotFoundBody put user picture not found body
//
// swagger:model PutUserPictureNotFoundBody
type PutUserPictureNotFoundBody struct {

	// May be null.
	Entity string `json:"entity,omitempty"`

	// May be null.
	Identifer string `json:"identifer,omitempty"`
}

// Validate validates this put user picture not found body
func (o *PutUserPictureNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user picture not found body based on context it is used
func (o *PutUserPictureNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserPictureNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserPictureNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutUserPictureNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
