// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteAppUsageHistoryOKCode is the HTTP code returned for type DeleteAppUsageHistoryOK
const DeleteAppUsageHistoryOKCode int = 200

/*DeleteAppUsageHistoryOK Success DELETing User usageHistory.

swagger:response deleteAppUsageHistoryOK
*/
type DeleteAppUsageHistoryOK struct {
}

// NewDeleteAppUsageHistoryOK creates DeleteAppUsageHistoryOK with default headers values
func NewDeleteAppUsageHistoryOK() *DeleteAppUsageHistoryOK {

	return &DeleteAppUsageHistoryOK{}
}

// WriteResponse to the client
func (o *DeleteAppUsageHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteAppUsageHistoryUnauthorizedCode is the HTTP code returned for type DeleteAppUsageHistoryUnauthorized
const DeleteAppUsageHistoryUnauthorizedCode int = 401

/*DeleteAppUsageHistoryUnauthorized Unauthorized.

swagger:response deleteAppUsageHistoryUnauthorized
*/
type DeleteAppUsageHistoryUnauthorized struct {
}

// NewDeleteAppUsageHistoryUnauthorized creates DeleteAppUsageHistoryUnauthorized with default headers values
func NewDeleteAppUsageHistoryUnauthorized() *DeleteAppUsageHistoryUnauthorized {

	return &DeleteAppUsageHistoryUnauthorized{}
}

// WriteResponse to the client
func (o *DeleteAppUsageHistoryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// DeleteAppUsageHistoryForbiddenCode is the HTTP code returned for type DeleteAppUsageHistoryForbidden
const DeleteAppUsageHistoryForbiddenCode int = 403

/*DeleteAppUsageHistoryForbidden Forbidden.

swagger:response deleteAppUsageHistoryForbidden
*/
type DeleteAppUsageHistoryForbidden struct {
}

// NewDeleteAppUsageHistoryForbidden creates DeleteAppUsageHistoryForbidden with default headers values
func NewDeleteAppUsageHistoryForbidden() *DeleteAppUsageHistoryForbidden {

	return &DeleteAppUsageHistoryForbidden{}
}

// WriteResponse to the client
func (o *DeleteAppUsageHistoryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// DeleteAppUsageHistoryInternalServerErrorCode is the HTTP code returned for type DeleteAppUsageHistoryInternalServerError
const DeleteAppUsageHistoryInternalServerErrorCode int = 500

/*DeleteAppUsageHistoryInternalServerError Server error.

swagger:response deleteAppUsageHistoryInternalServerError
*/
type DeleteAppUsageHistoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *DeleteAppUsageHistoryInternalServerErrorBody `json:"body,omitempty"`
}

// NewDeleteAppUsageHistoryInternalServerError creates DeleteAppUsageHistoryInternalServerError with default headers values
func NewDeleteAppUsageHistoryInternalServerError() *DeleteAppUsageHistoryInternalServerError {

	return &DeleteAppUsageHistoryInternalServerError{}
}

// WithPayload adds the payload to the delete app usage history internal server error response
func (o *DeleteAppUsageHistoryInternalServerError) WithPayload(payload *DeleteAppUsageHistoryInternalServerErrorBody) *DeleteAppUsageHistoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete app usage history internal server error response
func (o *DeleteAppUsageHistoryInternalServerError) SetPayload(payload *DeleteAppUsageHistoryInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteAppUsageHistoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
