// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/issue-one/offTime-rest-api/gen/models"
)

// PostRoomOKCode is the HTTP code returned for type PostRoomOK
const PostRoomOKCode int = 200

/*PostRoomOK Successful POSTing rooms

swagger:response postRoomOK
*/
type PostRoomOK struct {

	/*
	  In: Body
	*/
	Payload *models.Room `json:"body,omitempty"`
}

// NewPostRoomOK creates PostRoomOK with default headers values
func NewPostRoomOK() *PostRoomOK {

	return &PostRoomOK{}
}

// WithPayload adds the payload to the post room o k response
func (o *PostRoomOK) WithPayload(payload *models.Room) *PostRoomOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post room o k response
func (o *PostRoomOK) SetPayload(payload *models.Room) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRoomOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRoomBadRequestCode is the HTTP code returned for type PostRoomBadRequest
const PostRoomBadRequestCode int = 400

/*PostRoomBadRequest Illegal input for operation.

swagger:response postRoomBadRequest
*/
type PostRoomBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostRoomBadRequestBody `json:"body,omitempty"`
}

// NewPostRoomBadRequest creates PostRoomBadRequest with default headers values
func NewPostRoomBadRequest() *PostRoomBadRequest {

	return &PostRoomBadRequest{}
}

// WithPayload adds the payload to the post room bad request response
func (o *PostRoomBadRequest) WithPayload(payload *PostRoomBadRequestBody) *PostRoomBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post room bad request response
func (o *PostRoomBadRequest) SetPayload(payload *PostRoomBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRoomBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRoomUnauthorizedCode is the HTTP code returned for type PostRoomUnauthorized
const PostRoomUnauthorizedCode int = 401

/*PostRoomUnauthorized Unauthorized.

swagger:response postRoomUnauthorized
*/
type PostRoomUnauthorized struct {
}

// NewPostRoomUnauthorized creates PostRoomUnauthorized with default headers values
func NewPostRoomUnauthorized() *PostRoomUnauthorized {

	return &PostRoomUnauthorized{}
}

// WriteResponse to the client
func (o *PostRoomUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PostRoomForbiddenCode is the HTTP code returned for type PostRoomForbidden
const PostRoomForbiddenCode int = 403

/*PostRoomForbidden Forbidden.

swagger:response postRoomForbidden
*/
type PostRoomForbidden struct {
}

// NewPostRoomForbidden creates PostRoomForbidden with default headers values
func NewPostRoomForbidden() *PostRoomForbidden {

	return &PostRoomForbidden{}
}

// WriteResponse to the client
func (o *PostRoomForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PostRoomNotFoundCode is the HTTP code returned for type PostRoomNotFound
const PostRoomNotFoundCode int = 404

/*PostRoomNotFound Entity not found.

swagger:response postRoomNotFound
*/
type PostRoomNotFound struct {

	/*
	  In: Body
	*/
	Payload *PostRoomNotFoundBody `json:"body,omitempty"`
}

// NewPostRoomNotFound creates PostRoomNotFound with default headers values
func NewPostRoomNotFound() *PostRoomNotFound {

	return &PostRoomNotFound{}
}

// WithPayload adds the payload to the post room not found response
func (o *PostRoomNotFound) WithPayload(payload *PostRoomNotFoundBody) *PostRoomNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post room not found response
func (o *PostRoomNotFound) SetPayload(payload *PostRoomNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRoomNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRoomInternalServerErrorCode is the HTTP code returned for type PostRoomInternalServerError
const PostRoomInternalServerErrorCode int = 500

/*PostRoomInternalServerError Server error.

swagger:response postRoomInternalServerError
*/
type PostRoomInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostRoomInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostRoomInternalServerError creates PostRoomInternalServerError with default headers values
func NewPostRoomInternalServerError() *PostRoomInternalServerError {

	return &PostRoomInternalServerError{}
}

// WithPayload adds the payload to the post room internal server error response
func (o *PostRoomInternalServerError) WithPayload(payload *PostRoomInternalServerErrorBody) *PostRoomInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post room internal server error response
func (o *PostRoomInternalServerError) SetPayload(payload *PostRoomInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRoomInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
