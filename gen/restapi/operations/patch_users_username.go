// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchUsersUsernameHandlerFunc turns a function with the right signature into a patch users username handler
type PatchUsersUsernameHandlerFunc func(PatchUsersUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchUsersUsernameHandlerFunc) Handle(params PatchUsersUsernameParams) middleware.Responder {
	return fn(params)
}

// PatchUsersUsernameHandler interface for that can handle valid patch users username params
type PatchUsersUsernameHandler interface {
	Handle(PatchUsersUsernameParams) middleware.Responder
}

// NewPatchUsersUsername creates a new http.Handler for the patch users username operation
func NewPatchUsersUsername(ctx *middleware.Context, handler PatchUsersUsernameHandler) *PatchUsersUsername {
	return &PatchUsersUsername{Context: ctx, Handler: handler}
}

/* PatchUsersUsername swagger:route PATCH /users/{username} patchUsersUsername

PatchUsersUsername patch users username API

*/
type PatchUsersUsername struct {
	Context *middleware.Context
	Handler PatchUsersUsernameHandler
}

func (o *PatchUsersUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchUsersUsernameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchUsersUsernameBadRequestBody patch users username bad request body
//
// swagger:model PatchUsersUsernameBadRequestBody
type PatchUsersUsernameBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this patch users username bad request body
func (o *PatchUsersUsernameBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch users username bad request body based on context it is used
func (o *PatchUsersUsernameBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchUsersUsernameBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUsersUsernameBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchUsersUsernameBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchUsersUsernameConflictBody patch users username conflict body
//
// swagger:model PatchUsersUsernameConflictBody
type PatchUsersUsernameConflictBody struct {

	// field
	Field string `json:"field,omitempty"`
}

// Validate validates this patch users username conflict body
func (o *PatchUsersUsernameConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch users username conflict body based on context it is used
func (o *PatchUsersUsernameConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchUsersUsernameConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUsersUsernameConflictBody) UnmarshalBinary(b []byte) error {
	var res PatchUsersUsernameConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchUsersUsernameInternalServerErrorBody patch users username internal server error body
//
// swagger:model PatchUsersUsernameInternalServerErrorBody
type PatchUsersUsernameInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this patch users username internal server error body
func (o *PatchUsersUsernameInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch users username internal server error body based on context it is used
func (o *PatchUsersUsernameInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchUsersUsernameInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUsersUsernameInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatchUsersUsernameInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
