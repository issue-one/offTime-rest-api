// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/issue-one/offTime-rest-api/gen/models"
)

// PatchUsersUsernameOKCode is the HTTP code returned for type PatchUsersUsernameOK
const PatchUsersUsernameOKCode int = 200

/*PatchUsersUsernameOK Success patching User.

swagger:response patchUsersUsernameOK
*/
type PatchUsersUsernameOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewPatchUsersUsernameOK creates PatchUsersUsernameOK with default headers values
func NewPatchUsersUsernameOK() *PatchUsersUsernameOK {

	return &PatchUsersUsernameOK{}
}

// WithPayload adds the payload to the patch users username o k response
func (o *PatchUsersUsernameOK) WithPayload(payload *models.User) *PatchUsersUsernameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch users username o k response
func (o *PatchUsersUsernameOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUsersUsernameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchUsersUsernameBadRequestCode is the HTTP code returned for type PatchUsersUsernameBadRequest
const PatchUsersUsernameBadRequestCode int = 400

/*PatchUsersUsernameBadRequest Illegal input for operation.

swagger:response patchUsersUsernameBadRequest
*/
type PatchUsersUsernameBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PatchUsersUsernameBadRequestBody `json:"body,omitempty"`
}

// NewPatchUsersUsernameBadRequest creates PatchUsersUsernameBadRequest with default headers values
func NewPatchUsersUsernameBadRequest() *PatchUsersUsernameBadRequest {

	return &PatchUsersUsernameBadRequest{}
}

// WithPayload adds the payload to the patch users username bad request response
func (o *PatchUsersUsernameBadRequest) WithPayload(payload *PatchUsersUsernameBadRequestBody) *PatchUsersUsernameBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch users username bad request response
func (o *PatchUsersUsernameBadRequest) SetPayload(payload *PatchUsersUsernameBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUsersUsernameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchUsersUsernameNotFoundCode is the HTTP code returned for type PatchUsersUsernameNotFound
const PatchUsersUsernameNotFoundCode int = 404

/*PatchUsersUsernameNotFound Entity not found.

swagger:response patchUsersUsernameNotFound
*/
type PatchUsersUsernameNotFound struct {

	/*
	  In: Body
	*/
	Payload *PatchUsersUsernameNotFoundBody `json:"body,omitempty"`
}

// NewPatchUsersUsernameNotFound creates PatchUsersUsernameNotFound with default headers values
func NewPatchUsersUsernameNotFound() *PatchUsersUsernameNotFound {

	return &PatchUsersUsernameNotFound{}
}

// WithPayload adds the payload to the patch users username not found response
func (o *PatchUsersUsernameNotFound) WithPayload(payload *PatchUsersUsernameNotFoundBody) *PatchUsersUsernameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch users username not found response
func (o *PatchUsersUsernameNotFound) SetPayload(payload *PatchUsersUsernameNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUsersUsernameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchUsersUsernameConflictCode is the HTTP code returned for type PatchUsersUsernameConflict
const PatchUsersUsernameConflictCode int = 409

/*PatchUsersUsernameConflict Field occupied.

swagger:response patchUsersUsernameConflict
*/
type PatchUsersUsernameConflict struct {

	/*
	  In: Body
	*/
	Payload *PatchUsersUsernameConflictBody `json:"body,omitempty"`
}

// NewPatchUsersUsernameConflict creates PatchUsersUsernameConflict with default headers values
func NewPatchUsersUsernameConflict() *PatchUsersUsernameConflict {

	return &PatchUsersUsernameConflict{}
}

// WithPayload adds the payload to the patch users username conflict response
func (o *PatchUsersUsernameConflict) WithPayload(payload *PatchUsersUsernameConflictBody) *PatchUsersUsernameConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch users username conflict response
func (o *PatchUsersUsernameConflict) SetPayload(payload *PatchUsersUsernameConflictBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUsersUsernameConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchUsersUsernameInternalServerErrorCode is the HTTP code returned for type PatchUsersUsernameInternalServerError
const PatchUsersUsernameInternalServerErrorCode int = 500

/*PatchUsersUsernameInternalServerError Server error.

swagger:response patchUsersUsernameInternalServerError
*/
type PatchUsersUsernameInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PatchUsersUsernameInternalServerErrorBody `json:"body,omitempty"`
}

// NewPatchUsersUsernameInternalServerError creates PatchUsersUsernameInternalServerError with default headers values
func NewPatchUsersUsernameInternalServerError() *PatchUsersUsernameInternalServerError {

	return &PatchUsersUsernameInternalServerError{}
}

// WithPayload adds the payload to the patch users username internal server error response
func (o *PatchUsersUsernameInternalServerError) WithPayload(payload *PatchUsersUsernameInternalServerErrorBody) *PatchUsersUsernameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch users username internal server error response
func (o *PatchUsersUsernameInternalServerError) SetPayload(payload *PatchUsersUsernameInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUsersUsernameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
