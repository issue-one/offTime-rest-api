// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetUsersUsernameUsageHistoryOKCode is the HTTP code returned for type GetUsersUsernameUsageHistoryOK
const GetUsersUsernameUsageHistoryOKCode int = 200

/*GetUsersUsernameUsageHistoryOK Success gettin all AppUsage history of User.

swagger:response getUsersUsernameUsageHistoryOK
*/
type GetUsersUsernameUsageHistoryOK struct {

	/*
	  In: Body
	*/
	Payload *GetUsersUsernameUsageHistoryOKBody `json:"body,omitempty"`
}

// NewGetUsersUsernameUsageHistoryOK creates GetUsersUsernameUsageHistoryOK with default headers values
func NewGetUsersUsernameUsageHistoryOK() *GetUsersUsernameUsageHistoryOK {

	return &GetUsersUsernameUsageHistoryOK{}
}

// WithPayload adds the payload to the get users username usage history o k response
func (o *GetUsersUsernameUsageHistoryOK) WithPayload(payload *GetUsersUsernameUsageHistoryOKBody) *GetUsersUsernameUsageHistoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users username usage history o k response
func (o *GetUsersUsernameUsageHistoryOK) SetPayload(payload *GetUsersUsernameUsageHistoryOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersUsernameUsageHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUsersUsernameUsageHistoryBadRequestCode is the HTTP code returned for type GetUsersUsernameUsageHistoryBadRequest
const GetUsersUsernameUsageHistoryBadRequestCode int = 400

/*GetUsersUsernameUsageHistoryBadRequest Illegal input for operation.

swagger:response getUsersUsernameUsageHistoryBadRequest
*/
type GetUsersUsernameUsageHistoryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *GetUsersUsernameUsageHistoryBadRequestBody `json:"body,omitempty"`
}

// NewGetUsersUsernameUsageHistoryBadRequest creates GetUsersUsernameUsageHistoryBadRequest with default headers values
func NewGetUsersUsernameUsageHistoryBadRequest() *GetUsersUsernameUsageHistoryBadRequest {

	return &GetUsersUsernameUsageHistoryBadRequest{}
}

// WithPayload adds the payload to the get users username usage history bad request response
func (o *GetUsersUsernameUsageHistoryBadRequest) WithPayload(payload *GetUsersUsernameUsageHistoryBadRequestBody) *GetUsersUsernameUsageHistoryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users username usage history bad request response
func (o *GetUsersUsernameUsageHistoryBadRequest) SetPayload(payload *GetUsersUsernameUsageHistoryBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersUsernameUsageHistoryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUsersUsernameUsageHistoryNotFoundCode is the HTTP code returned for type GetUsersUsernameUsageHistoryNotFound
const GetUsersUsernameUsageHistoryNotFoundCode int = 404

/*GetUsersUsernameUsageHistoryNotFound Entity not found.

swagger:response getUsersUsernameUsageHistoryNotFound
*/
type GetUsersUsernameUsageHistoryNotFound struct {

	/*
	  In: Body
	*/
	Payload *GetUsersUsernameUsageHistoryNotFoundBody `json:"body,omitempty"`
}

// NewGetUsersUsernameUsageHistoryNotFound creates GetUsersUsernameUsageHistoryNotFound with default headers values
func NewGetUsersUsernameUsageHistoryNotFound() *GetUsersUsernameUsageHistoryNotFound {

	return &GetUsersUsernameUsageHistoryNotFound{}
}

// WithPayload adds the payload to the get users username usage history not found response
func (o *GetUsersUsernameUsageHistoryNotFound) WithPayload(payload *GetUsersUsernameUsageHistoryNotFoundBody) *GetUsersUsernameUsageHistoryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users username usage history not found response
func (o *GetUsersUsernameUsageHistoryNotFound) SetPayload(payload *GetUsersUsernameUsageHistoryNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersUsernameUsageHistoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUsersUsernameUsageHistoryInternalServerErrorCode is the HTTP code returned for type GetUsersUsernameUsageHistoryInternalServerError
const GetUsersUsernameUsageHistoryInternalServerErrorCode int = 500

/*GetUsersUsernameUsageHistoryInternalServerError Server error.

swagger:response getUsersUsernameUsageHistoryInternalServerError
*/
type GetUsersUsernameUsageHistoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *GetUsersUsernameUsageHistoryInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetUsersUsernameUsageHistoryInternalServerError creates GetUsersUsernameUsageHistoryInternalServerError with default headers values
func NewGetUsersUsernameUsageHistoryInternalServerError() *GetUsersUsernameUsageHistoryInternalServerError {

	return &GetUsersUsernameUsageHistoryInternalServerError{}
}

// WithPayload adds the payload to the get users username usage history internal server error response
func (o *GetUsersUsernameUsageHistoryInternalServerError) WithPayload(payload *GetUsersUsernameUsageHistoryInternalServerErrorBody) *GetUsersUsernameUsageHistoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users username usage history internal server error response
func (o *GetUsersUsernameUsageHistoryInternalServerError) SetPayload(payload *GetUsersUsernameUsageHistoryInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersUsernameUsageHistoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
