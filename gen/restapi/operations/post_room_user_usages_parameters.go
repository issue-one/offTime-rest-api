// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPostRoomUserUsagesParams creates a new PostRoomUserUsagesParams object
//
// There are no default values defined in the spec.
func NewPostRoomUserUsagesParams() PostRoomUserUsagesParams {

	return PostRoomUserUsagesParams{}
}

// PostRoomUserUsagesParams contains all the bound params for the post room user usages operation
// typically these are obtained from a http.Request
//
// swagger:parameters postRoomUserUsages
type PostRoomUserUsagesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	Milliseconds int64
	/*
	  Required: true
	  In: path
	*/
	RoomID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostRoomUserUsagesParams() beforehand.
func (o *PostRoomUserUsagesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qMilliseconds, qhkMilliseconds, _ := qs.GetOK("milliseconds")
	if err := o.bindMilliseconds(qMilliseconds, qhkMilliseconds, route.Formats); err != nil {
		res = append(res, err)
	}

	rRoomID, rhkRoomID, _ := route.Params.GetOK("roomID")
	if err := o.bindRoomID(rRoomID, rhkRoomID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMilliseconds binds and validates parameter Milliseconds from query.
func (o *PostRoomUserUsagesParams) bindMilliseconds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("milliseconds", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("milliseconds", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("milliseconds", "query", "int64", raw)
	}
	o.Milliseconds = value

	return nil
}

// bindRoomID binds and validates parameter RoomID from path.
func (o *PostRoomUserUsagesParams) bindRoomID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("roomID", "path", "strfmt.UUID", raw)
	}
	o.RoomID = *(value.(*strfmt.UUID))

	if err := o.validateRoomID(formats); err != nil {
		return err
	}

	return nil
}

// validateRoomID carries on validations for parameter RoomID
func (o *PostRoomUserUsagesParams) validateRoomID(formats strfmt.Registry) error {

	if err := validate.FormatOf("roomID", "path", "uuid", o.RoomID.String(), formats); err != nil {
		return err
	}
	return nil
}
