// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutUserHandlerFunc turns a function with the right signature into a put user handler
type PutUserHandlerFunc func(PutUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserHandlerFunc) Handle(params PutUserParams) middleware.Responder {
	return fn(params)
}

// PutUserHandler interface for that can handle valid put user params
type PutUserHandler interface {
	Handle(PutUserParams) middleware.Responder
}

// NewPutUser creates a new http.Handler for the put user operation
func NewPutUser(ctx *middleware.Context, handler PutUserHandler) *PutUser {
	return &PutUser{Context: ctx, Handler: handler}
}

/* PutUser swagger:route PUT /users/{username} putUser

Create a User to the specifed username.

*/
type PutUser struct {
	Context *middleware.Context
	Handler PutUserHandler
}

func (o *PutUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutUserBadRequestBody put user bad request body
//
// swagger:model PutUserBadRequestBody
type PutUserBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put user bad request body
func (o *PutUserBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user bad request body based on context it is used
func (o *PutUserBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutUserBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutUserConflictBody put user conflict body
//
// swagger:model PutUserConflictBody
type PutUserConflictBody struct {

	// field
	Field string `json:"field,omitempty"`
}

// Validate validates this put user conflict body
func (o *PutUserConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user conflict body based on context it is used
func (o *PutUserConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserConflictBody) UnmarshalBinary(b []byte) error {
	var res PutUserConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutUserInternalServerErrorBody put user internal server error body
//
// swagger:model PutUserInternalServerErrorBody
type PutUserInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put user internal server error body
func (o *PutUserInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put user internal server error body based on context it is used
func (o *PutUserInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUserInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUserInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutUserInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
