// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/issue-one/offTime-rest-api/gen/models"
)

// NewOffTimeAPI creates a new OffTime instance
func NewOffTimeAPI(spec *loads.Document) *OffTimeAPI {
	return &OffTimeAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		DeleteAppUsageHistoryHandler: DeleteAppUsageHistoryHandlerFunc(func(params DeleteAppUsageHistoryParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeleteAppUsageHistory has not yet been implemented")
		}),
		DeleteUserHandler: DeleteUserHandlerFunc(func(params DeleteUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUser has not yet been implemented")
		}),
		DeleteUserRoomHistoryHandler: DeleteUserRoomHistoryHandlerFunc(func(params DeleteUserRoomHistoryParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserRoomHistory has not yet been implemented")
		}),
		GetAppUsageHistoryHandler: GetAppUsageHistoryHandlerFunc(func(params GetAppUsageHistoryParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetAppUsageHistory has not yet been implemented")
		}),
		GetRoomHandler: GetRoomHandlerFunc(func(params GetRoomParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetRoom has not yet been implemented")
		}),
		GetRoomsHandler: GetRoomsHandlerFunc(func(params GetRoomsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetRooms has not yet been implemented")
		}),
		GetTokenAuthRefreshHandler: GetTokenAuthRefreshHandlerFunc(func(params GetTokenAuthRefreshParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetTokenAuthRefresh has not yet been implemented")
		}),
		GetUserHandler: GetUserHandlerFunc(func(params GetUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetUser has not yet been implemented")
		}),
		GetUserRoomHistoryHandler: GetUserRoomHistoryHandlerFunc(func(params GetUserRoomHistoryParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetUserRoomHistory has not yet been implemented")
		}),
		GetUsersHandler: GetUsersHandlerFunc(func(params GetUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetUsers has not yet been implemented")
		}),
		PatchUserHandler: PatchUserHandlerFunc(func(params PatchUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PatchUser has not yet been implemented")
		}),
		PostAppUsageHandler: PostAppUsageHandlerFunc(func(params PostAppUsageParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PostAppUsage has not yet been implemented")
		}),
		PostRoomHandler: PostRoomHandlerFunc(func(params PostRoomParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PostRoom has not yet been implemented")
		}),
		PostRoomUserUsagesHandler: PostRoomUserUsagesHandlerFunc(func(params PostRoomUserUsagesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PostRoomUserUsages has not yet been implemented")
		}),
		PostTokenAuthHandler: PostTokenAuthHandlerFunc(func(params PostTokenAuthParams) middleware.Responder {
			return middleware.NotImplemented("operation PostTokenAuth has not yet been implemented")
		}),
		PutUserHandler: PutUserHandlerFunc(func(params PutUserParams) middleware.Responder {
			return middleware.NotImplemented("operation PutUser has not yet been implemented")
		}),
		PutUserPictureHandler: PutUserPictureHandlerFunc(func(params PutUserPictureParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PutUserPicture has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		JwtAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (jwt) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*OffTimeAPI the off time API */
type OffTimeAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// JwtAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	JwtAuth func(string) (*models.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DeleteAppUsageHistoryHandler sets the operation handler for the delete app usage history operation
	DeleteAppUsageHistoryHandler DeleteAppUsageHistoryHandler
	// DeleteUserHandler sets the operation handler for the delete user operation
	DeleteUserHandler DeleteUserHandler
	// DeleteUserRoomHistoryHandler sets the operation handler for the delete user room history operation
	DeleteUserRoomHistoryHandler DeleteUserRoomHistoryHandler
	// GetAppUsageHistoryHandler sets the operation handler for the get app usage history operation
	GetAppUsageHistoryHandler GetAppUsageHistoryHandler
	// GetRoomHandler sets the operation handler for the get room operation
	GetRoomHandler GetRoomHandler
	// GetRoomsHandler sets the operation handler for the get rooms operation
	GetRoomsHandler GetRoomsHandler
	// GetTokenAuthRefreshHandler sets the operation handler for the get token auth refresh operation
	GetTokenAuthRefreshHandler GetTokenAuthRefreshHandler
	// GetUserHandler sets the operation handler for the get user operation
	GetUserHandler GetUserHandler
	// GetUserRoomHistoryHandler sets the operation handler for the get user room history operation
	GetUserRoomHistoryHandler GetUserRoomHistoryHandler
	// GetUsersHandler sets the operation handler for the get users operation
	GetUsersHandler GetUsersHandler
	// PatchUserHandler sets the operation handler for the patch user operation
	PatchUserHandler PatchUserHandler
	// PostAppUsageHandler sets the operation handler for the post app usage operation
	PostAppUsageHandler PostAppUsageHandler
	// PostRoomHandler sets the operation handler for the post room operation
	PostRoomHandler PostRoomHandler
	// PostRoomUserUsagesHandler sets the operation handler for the post room user usages operation
	PostRoomUserUsagesHandler PostRoomUserUsagesHandler
	// PostTokenAuthHandler sets the operation handler for the post token auth operation
	PostTokenAuthHandler PostTokenAuthHandler
	// PutUserHandler sets the operation handler for the put user operation
	PutUserHandler PutUserHandler
	// PutUserPictureHandler sets the operation handler for the put user picture operation
	PutUserPictureHandler PutUserPictureHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *OffTimeAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *OffTimeAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *OffTimeAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *OffTimeAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *OffTimeAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *OffTimeAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *OffTimeAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *OffTimeAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *OffTimeAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the OffTimeAPI
func (o *OffTimeAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.JwtAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.DeleteAppUsageHistoryHandler == nil {
		unregistered = append(unregistered, "DeleteAppUsageHistoryHandler")
	}
	if o.DeleteUserHandler == nil {
		unregistered = append(unregistered, "DeleteUserHandler")
	}
	if o.DeleteUserRoomHistoryHandler == nil {
		unregistered = append(unregistered, "DeleteUserRoomHistoryHandler")
	}
	if o.GetAppUsageHistoryHandler == nil {
		unregistered = append(unregistered, "GetAppUsageHistoryHandler")
	}
	if o.GetRoomHandler == nil {
		unregistered = append(unregistered, "GetRoomHandler")
	}
	if o.GetRoomsHandler == nil {
		unregistered = append(unregistered, "GetRoomsHandler")
	}
	if o.GetTokenAuthRefreshHandler == nil {
		unregistered = append(unregistered, "GetTokenAuthRefreshHandler")
	}
	if o.GetUserHandler == nil {
		unregistered = append(unregistered, "GetUserHandler")
	}
	if o.GetUserRoomHistoryHandler == nil {
		unregistered = append(unregistered, "GetUserRoomHistoryHandler")
	}
	if o.GetUsersHandler == nil {
		unregistered = append(unregistered, "GetUsersHandler")
	}
	if o.PatchUserHandler == nil {
		unregistered = append(unregistered, "PatchUserHandler")
	}
	if o.PostAppUsageHandler == nil {
		unregistered = append(unregistered, "PostAppUsageHandler")
	}
	if o.PostRoomHandler == nil {
		unregistered = append(unregistered, "PostRoomHandler")
	}
	if o.PostRoomUserUsagesHandler == nil {
		unregistered = append(unregistered, "PostRoomUserUsagesHandler")
	}
	if o.PostTokenAuthHandler == nil {
		unregistered = append(unregistered, "PostTokenAuthHandler")
	}
	if o.PutUserHandler == nil {
		unregistered = append(unregistered, "PutUserHandler")
	}
	if o.PutUserPictureHandler == nil {
		unregistered = append(unregistered, "PutUserPictureHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *OffTimeAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *OffTimeAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "jwt":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.JwtAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *OffTimeAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *OffTimeAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *OffTimeAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *OffTimeAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the off time API
func (o *OffTimeAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *OffTimeAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}/appUsageHistory"] = NewDeleteAppUsageHistory(o.context, o.DeleteAppUsageHistoryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}"] = NewDeleteUser(o.context, o.DeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}/roomHistory"] = NewDeleteUserRoomHistory(o.context, o.DeleteUserRoomHistoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/appUsageHistory"] = NewGetAppUsageHistory(o.context, o.GetAppUsageHistoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rooms/{roomID}"] = NewGetRoom(o.context, o.GetRoomHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rooms"] = NewGetRooms(o.context, o.GetRoomsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/token-auth-refresh"] = NewGetTokenAuthRefresh(o.context, o.GetTokenAuthRefreshHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}"] = NewGetUser(o.context, o.GetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/roomHistory"] = NewGetUserRoomHistory(o.context, o.GetUserRoomHistoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = NewGetUsers(o.context, o.GetUsersHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/{username}"] = NewPatchUser(o.context, o.PatchUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/appUsageHistory"] = NewPostAppUsage(o.context, o.PostAppUsageHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rooms"] = NewPostRoom(o.context, o.PostRoomHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rooms/{roomID}/userUsages"] = NewPostRoomUserUsages(o.context, o.PostRoomUserUsagesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/token-auth"] = NewPostTokenAuth(o.context, o.PostTokenAuthHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}"] = NewPutUser(o.context, o.PutUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/picture"] = NewPutUserPicture(o.context, o.PutUserPictureHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *OffTimeAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *OffTimeAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *OffTimeAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *OffTimeAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *OffTimeAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
