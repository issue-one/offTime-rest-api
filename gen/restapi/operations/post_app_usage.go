// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/issue-one/offTime-rest-api/gen/models"
)

// PostAppUsageHandlerFunc turns a function with the right signature into a post app usage handler
type PostAppUsageHandlerFunc func(PostAppUsageParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAppUsageHandlerFunc) Handle(params PostAppUsageParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PostAppUsageHandler interface for that can handle valid post app usage params
type PostAppUsageHandler interface {
	Handle(PostAppUsageParams, *models.User) middleware.Responder
}

// NewPostAppUsage creates a new http.Handler for the post app usage operation
func NewPostAppUsage(ctx *middleware.Context, handler PostAppUsageHandler) *PostAppUsage {
	return &PostAppUsage{Context: ctx, Handler: handler}
}

/* PostAppUsage swagger:route POST /users/{username}/appUsageHistory postAppUsage

PostAppUsage post app usage API

*/
type PostAppUsage struct {
	Context *middleware.Context
	Handler PostAppUsageHandler
}

func (o *PostAppUsage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAppUsageParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAppUsageBadRequestBody post app usage bad request body
//
// swagger:model PostAppUsageBadRequestBody
type PostAppUsageBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post app usage bad request body
func (o *PostAppUsageBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post app usage bad request body based on context it is used
func (o *PostAppUsageBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAppUsageBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAppUsageBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostAppUsageBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAppUsageConflictBody post app usage conflict body
//
// swagger:model PostAppUsageConflictBody
type PostAppUsageConflictBody struct {

	// field
	Field string `json:"field,omitempty"`
}

// Validate validates this post app usage conflict body
func (o *PostAppUsageConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post app usage conflict body based on context it is used
func (o *PostAppUsageConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAppUsageConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAppUsageConflictBody) UnmarshalBinary(b []byte) error {
	var res PostAppUsageConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAppUsageInternalServerErrorBody post app usage internal server error body
//
// swagger:model PostAppUsageInternalServerErrorBody
type PostAppUsageInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post app usage internal server error body
func (o *PostAppUsageInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post app usage internal server error body based on context it is used
func (o *PostAppUsageInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAppUsageInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAppUsageInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostAppUsageInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAppUsageNotFoundBody post app usage not found body
//
// swagger:model PostAppUsageNotFoundBody
type PostAppUsageNotFoundBody struct {

	// May be null.
	Entity string `json:"entity,omitempty"`

	// May be null.
	Identifer string `json:"identifer,omitempty"`
}

// Validate validates this post app usage not found body
func (o *PostAppUsageNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post app usage not found body based on context it is used
func (o *PostAppUsageNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAppUsageNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAppUsageNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostAppUsageNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
