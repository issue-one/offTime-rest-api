// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostUsersUsernameUsageHistoryHandlerFunc turns a function with the right signature into a post users username usage history handler
type PostUsersUsernameUsageHistoryHandlerFunc func(PostUsersUsernameUsageHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUsersUsernameUsageHistoryHandlerFunc) Handle(params PostUsersUsernameUsageHistoryParams) middleware.Responder {
	return fn(params)
}

// PostUsersUsernameUsageHistoryHandler interface for that can handle valid post users username usage history params
type PostUsersUsernameUsageHistoryHandler interface {
	Handle(PostUsersUsernameUsageHistoryParams) middleware.Responder
}

// NewPostUsersUsernameUsageHistory creates a new http.Handler for the post users username usage history operation
func NewPostUsersUsernameUsageHistory(ctx *middleware.Context, handler PostUsersUsernameUsageHistoryHandler) *PostUsersUsernameUsageHistory {
	return &PostUsersUsernameUsageHistory{Context: ctx, Handler: handler}
}

/* PostUsersUsernameUsageHistory swagger:route POST /users/{username}/usageHistory postUsersUsernameUsageHistory

PostUsersUsernameUsageHistory post users username usage history API

*/
type PostUsersUsernameUsageHistory struct {
	Context *middleware.Context
	Handler PostUsersUsernameUsageHistoryHandler
}

func (o *PostUsersUsernameUsageHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUsersUsernameUsageHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostUsersUsernameUsageHistoryBadRequestBody post users username usage history bad request body
//
// swagger:model PostUsersUsernameUsageHistoryBadRequestBody
type PostUsersUsernameUsageHistoryBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post users username usage history bad request body
func (o *PostUsersUsernameUsageHistoryBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post users username usage history bad request body based on context it is used
func (o *PostUsersUsernameUsageHistoryBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostUsersUsernameUsageHistoryBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUsersUsernameUsageHistoryConflictBody post users username usage history conflict body
//
// swagger:model PostUsersUsernameUsageHistoryConflictBody
type PostUsersUsernameUsageHistoryConflictBody struct {

	// field
	Field string `json:"field,omitempty"`
}

// Validate validates this post users username usage history conflict body
func (o *PostUsersUsernameUsageHistoryConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post users username usage history conflict body based on context it is used
func (o *PostUsersUsernameUsageHistoryConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryConflictBody) UnmarshalBinary(b []byte) error {
	var res PostUsersUsernameUsageHistoryConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUsersUsernameUsageHistoryInternalServerErrorBody post users username usage history internal server error body
//
// swagger:model PostUsersUsernameUsageHistoryInternalServerErrorBody
type PostUsersUsernameUsageHistoryInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post users username usage history internal server error body
func (o *PostUsersUsernameUsageHistoryInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post users username usage history internal server error body based on context it is used
func (o *PostUsersUsernameUsageHistoryInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostUsersUsernameUsageHistoryInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUsersUsernameUsageHistoryNotFoundBody post users username usage history not found body
//
// swagger:model PostUsersUsernameUsageHistoryNotFoundBody
type PostUsersUsernameUsageHistoryNotFoundBody struct {

	// May be null.
	Entity string `json:"entity,omitempty"`

	// May be null.
	Identifer string `json:"identifer,omitempty"`
}

// Validate validates this post users username usage history not found body
func (o *PostUsersUsernameUsageHistoryNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post users username usage history not found body based on context it is used
func (o *PostUsersUsernameUsageHistoryNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUsersUsernameUsageHistoryNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostUsersUsernameUsageHistoryNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
