// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/issue-one/offTime-rest-api/gen/models"
)

// GetAppUsageHistoryHandlerFunc turns a function with the right signature into a get app usage history handler
type GetAppUsageHistoryHandlerFunc func(GetAppUsageHistoryParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAppUsageHistoryHandlerFunc) Handle(params GetAppUsageHistoryParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetAppUsageHistoryHandler interface for that can handle valid get app usage history params
type GetAppUsageHistoryHandler interface {
	Handle(GetAppUsageHistoryParams, *models.User) middleware.Responder
}

// NewGetAppUsageHistory creates a new http.Handler for the get app usage history operation
func NewGetAppUsageHistory(ctx *middleware.Context, handler GetAppUsageHistoryHandler) *GetAppUsageHistory {
	return &GetAppUsageHistory{Context: ctx, Handler: handler}
}

/* GetAppUsageHistory swagger:route GET /users/{username}/appUsageHistory getAppUsageHistory

GetAppUsageHistory get app usage history API

*/
type GetAppUsageHistory struct {
	Context *middleware.Context
	Handler GetAppUsageHistoryHandler
}

func (o *GetAppUsageHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAppUsageHistoryParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAppUsageHistoryBadRequestBody get app usage history bad request body
//
// swagger:model GetAppUsageHistoryBadRequestBody
type GetAppUsageHistoryBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get app usage history bad request body
func (o *GetAppUsageHistoryBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get app usage history bad request body based on context it is used
func (o *GetAppUsageHistoryBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAppUsageHistoryBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAppUsageHistoryBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAppUsageHistoryBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetAppUsageHistoryInternalServerErrorBody get app usage history internal server error body
//
// swagger:model GetAppUsageHistoryInternalServerErrorBody
type GetAppUsageHistoryInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get app usage history internal server error body
func (o *GetAppUsageHistoryInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get app usage history internal server error body based on context it is used
func (o *GetAppUsageHistoryInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAppUsageHistoryInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAppUsageHistoryInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetAppUsageHistoryInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetAppUsageHistoryNotFoundBody get app usage history not found body
//
// swagger:model GetAppUsageHistoryNotFoundBody
type GetAppUsageHistoryNotFoundBody struct {

	// May be null.
	Entity string `json:"entity,omitempty"`

	// May be null.
	Identifer string `json:"identifer,omitempty"`
}

// Validate validates this get app usage history not found body
func (o *GetAppUsageHistoryNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get app usage history not found body based on context it is used
func (o *GetAppUsageHistoryNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAppUsageHistoryNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAppUsageHistoryNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAppUsageHistoryNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetAppUsageHistoryOKBody get app usage history o k body
//
// swagger:model GetAppUsageHistoryOKBody
type GetAppUsageHistoryOKBody struct {

	// items
	Items []*models.AppUsage `json:"items"`

	// total count
	// Example: 98738772
	TotalCount int64 `json:"totalCount,omitempty"`
}

// Validate validates this get app usage history o k body
func (o *GetAppUsageHistoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAppUsageHistoryOKBody) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAppUsageHistoryOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get app usage history o k body based on the context it is used
func (o *GetAppUsageHistoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAppUsageHistoryOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAppUsageHistoryOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAppUsageHistoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAppUsageHistoryOKBody) UnmarshalBinary(b []byte) error {
	var res GetAppUsageHistoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
