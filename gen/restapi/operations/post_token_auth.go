// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTokenAuthHandlerFunc turns a function with the right signature into a post token auth handler
type PostTokenAuthHandlerFunc func(PostTokenAuthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTokenAuthHandlerFunc) Handle(params PostTokenAuthParams) middleware.Responder {
	return fn(params)
}

// PostTokenAuthHandler interface for that can handle valid post token auth params
type PostTokenAuthHandler interface {
	Handle(PostTokenAuthParams) middleware.Responder
}

// NewPostTokenAuth creates a new http.Handler for the post token auth operation
func NewPostTokenAuth(ctx *middleware.Context, handler PostTokenAuthHandler) *PostTokenAuth {
	return &PostTokenAuth{Context: ctx, Handler: handler}
}

/* PostTokenAuth swagger:route POST /token-auth postTokenAuth

PostTokenAuth post token auth API

*/
type PostTokenAuth struct {
	Context *middleware.Context
	Handler PostTokenAuthHandler
}

func (o *PostTokenAuth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostTokenAuthParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTokenAuthBadRequestBody post token auth bad request body
//
// swagger:model PostTokenAuthBadRequestBody
type PostTokenAuthBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post token auth bad request body
func (o *PostTokenAuthBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post token auth bad request body based on context it is used
func (o *PostTokenAuthBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenAuthBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenAuthBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostTokenAuthBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokenAuthBody post token auth body
//
// swagger:model PostTokenAuthBody
type PostTokenAuthBody struct {

	// password
	// Format: password
	Password strfmt.Password `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this post token auth body
func (o *PostTokenAuthBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokenAuthBody) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(o.Password) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"password", "body", "password", o.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post token auth body based on context it is used
func (o *PostTokenAuthBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenAuthBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenAuthBody) UnmarshalBinary(b []byte) error {
	var res PostTokenAuthBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokenAuthInternalServerErrorBody post token auth internal server error body
//
// swagger:model PostTokenAuthInternalServerErrorBody
type PostTokenAuthInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this post token auth internal server error body
func (o *PostTokenAuthInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post token auth internal server error body based on context it is used
func (o *PostTokenAuthInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenAuthInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenAuthInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostTokenAuthInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokenAuthOKBody post token auth o k body
//
// swagger:model PostTokenAuthOKBody
type PostTokenAuthOKBody struct {

	// expirse in
	ExpirseIn int64 `json:"expirse_in,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this post token auth o k body
func (o *PostTokenAuthOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post token auth o k body based on context it is used
func (o *PostTokenAuthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokenAuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokenAuthOKBody) UnmarshalBinary(b []byte) error {
	var res PostTokenAuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
