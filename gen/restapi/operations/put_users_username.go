// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutUsersUsernameHandlerFunc turns a function with the right signature into a put users username handler
type PutUsersUsernameHandlerFunc func(PutUsersUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUsersUsernameHandlerFunc) Handle(params PutUsersUsernameParams) middleware.Responder {
	return fn(params)
}

// PutUsersUsernameHandler interface for that can handle valid put users username params
type PutUsersUsernameHandler interface {
	Handle(PutUsersUsernameParams) middleware.Responder
}

// NewPutUsersUsername creates a new http.Handler for the put users username operation
func NewPutUsersUsername(ctx *middleware.Context, handler PutUsersUsernameHandler) *PutUsersUsername {
	return &PutUsersUsername{Context: ctx, Handler: handler}
}

/* PutUsersUsername swagger:route PUT /users/{username} putUsersUsername

Create a User to the specifed username.

*/
type PutUsersUsername struct {
	Context *middleware.Context
	Handler PutUsersUsernameHandler
}

func (o *PutUsersUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUsersUsernameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutUsersUsernameBadRequestBody put users username bad request body
//
// swagger:model PutUsersUsernameBadRequestBody
type PutUsersUsernameBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put users username bad request body
func (o *PutUsersUsernameBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put users username bad request body based on context it is used
func (o *PutUsersUsernameBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUsersUsernameBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUsersUsernameBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutUsersUsernameBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutUsersUsernameConflictBody put users username conflict body
//
// swagger:model PutUsersUsernameConflictBody
type PutUsersUsernameConflictBody struct {

	// field
	Field string `json:"field,omitempty"`
}

// Validate validates this put users username conflict body
func (o *PutUsersUsernameConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put users username conflict body based on context it is used
func (o *PutUsersUsernameConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUsersUsernameConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUsersUsernameConflictBody) UnmarshalBinary(b []byte) error {
	var res PutUsersUsernameConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutUsersUsernameInternalServerErrorBody put users username internal server error body
//
// swagger:model PutUsersUsernameInternalServerErrorBody
type PutUsersUsernameInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put users username internal server error body
func (o *PutUsersUsernameInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put users username internal server error body based on context it is used
func (o *PutUsersUsernameInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutUsersUsernameInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUsersUsernameInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutUsersUsernameInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
