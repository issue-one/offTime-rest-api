swagger: '2.0'
info:
  title: offTime
  version: '1.0'
# securityDefinitions:
#   jwt:
#     type: basic
    
# security:
#   - jwt: []
paths:
  '/users':
    get:
      produces:
        - application/json
      parameters: 
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/skipParam'
      responses:
        '200':
          description: Success GETting Users.
          schema:
            properties:
              items:
                items:
                  $ref: '#/definitions/User'
                type: array
              totalCount:
                example: 98738772
                type: integer
        '500':
          $ref: '#/responses/ServerError'
        '404':
          $ref: '#/responses/NotFound'
  '/users/{username}':
    parameters:
      - $ref: '#/parameters/usernameParam'
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '500':
          $ref: '#/responses/ServerError'
        '404':
          $ref: '#/responses/NotFound'
        '200':
          description: Success GETting User under given username.
          schema:
            $ref: '#/definitions/User'
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserInput'
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/User'
        '409':
          $ref: '#/responses/Conflict'
        '400':
          $ref: '#/responses/BadInput'
        '500':
          $ref: '#/responses/ServerError'
      description: Create a User to the specifed username.
    patch:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserInput'
      responses:
        '500':
          $ref: '#/responses/ServerError'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadInput'
        '409':
          $ref: '#/responses/Conflict'
        '200':
          description: Success patching User.
          schema:
            $ref: '#/definitions/User'
    delete:
      parameters: []
      responses:
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: Success DELETing user under given username
  '/users/{username}/picture':
    parameters:
      - $ref: '#/parameters/usernameParam'
    put:
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: image
          type: file
          required: true
      responses:
        '500':
          $ref: '#/responses/ServerError'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadInput'
        '200':
          description: Success patching User.
          schema:
            type: string
            format: url
            example: http://pictureserver.com/picture102.png
  '/users/{username}/roomHistory':
    parameters:
      - $ref: '#/parameters/usernameParam'
    get:
      produces:
        - application/json
      responses:
        '404':
          $ref: '#/responses/NotFound'
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: Success gettin all Room history of User.
          schema:
            type: array
            items:
              $ref: '#/definitions/Room'
    delete:
      produces:
        - application/json
      responses:
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: Success DELETing User roomHistory.
  '/users/{username}/usageHistory':
    parameters:
      - $ref: '#/parameters/usernameParam'
    delete:
      parameters: []
      responses:
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: Success DELETing User usageHistory.
    get:
      produces:
        - application/json
      parameters:  
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/skipParam'
      responses:
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadInput'
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: Success gettin all AppUsage history of User.
          schema:
            properties:
              totalCount:
                example: 98738772
                type: integer
              items:
                type: array
                items:
                  $ref: '#/definitions/AppUsage'
    post:
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CreateAppUsageInput'
      responses:
        '400':
          $ref: '#/responses/BadInput'
        '404':
          $ref: '#/responses/NotFound'
        '409':
          $ref: '#/responses/Conflict'
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: Success adding AppUsage entry.
          schema:
            $ref: '#/definitions/AppUsage'
  '/rooms':
    post:
      produces:
        - application/json
      parameters: 
        - in: body
          name: body
          required: true
          schema:
            properties:
              roomName:
                type: string
              username:
                type: string
      responses:
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadInput'
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: 'Successful POSTing rooms'
          schema:
            $ref: '#/definitions/Room'
    get:
      produces:
        - application/json
      parameters: 
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/skipParam'
      responses:
        '400':
          $ref: '#/responses/BadInput'
        '500':
          $ref: '#/responses/ServerError'
        '200':
          description: 'Successful GETting all Rooms'
          schema:
            properties:
              items:
                items:
                  $ref: '#/definitions/Room'
                type: array
              totalCount:
                example: 98738772
                type: integer
  '/rooms/{roomID}':
    parameters:
      - $ref: '#/parameters/roomIdParam'
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '500':
          $ref: '#/responses/ServerError'
        '404':
          $ref: '#/responses/NotFound'
        '200':
          description: Success GETting room under roomID.
          schema:
            $ref: '#/definitions/Room'  
  '/rooms/{roomID}/userUsages':
    parameters:
      - $ref: '#/parameters/roomIdParam'
    post:
      produces:
        - application/json
      parameters:
        - in: query
          name: username
          type: string
          minLength: 5
          required: true
        - in: query
          name: seconds
          type: integer
          required: true
      responses:
        '422':
          description: Room is ongoing.
        '400':
          $ref: '#/responses/BadInput'
        '500':
          $ref: '#/responses/ServerError'
        '404':
          $ref: '#/responses/NotFound'
        '200':
          description: Success adding usageSeconds to Room.
          schema:
            $ref: '#/definitions/Room'
definitions:
  User:
    properties:
      username:
        example: lula34
        type: string
      createdAt:
        example: '2009-05-08 14:40:52,531'
        format: date-time
        type: string
      updatedAt:
        example: '2009-05-08 14:40:52,531'
        format: date-time
        type: string
      email:
        format: email
        type: string
      password:
        format: password
        type: string
      pictureURL:
        example: http://pictureserver.com/picture102.png
        type: string
      roomHistory:
        description: Rooms user has participated in.
        type: array
        items:
          description: IDs of rooms.
          format: uuid
          type: string
  CreateUserInput:
    properties:
      email:
        format: email
        type: string
      password:
        example: lula34
        format: password
        type: string
        minLength: 8
    required:
      - email
      - password
  UpdateUserInput:
    properties:
      email:
        format: email
        type: string
      password:
        format: password
        type: string
  AppUsage:
    properties:
      createdAt:
        example: '2009-05-08 14:40:52,531'
        format: date-time
        type: string
      appName:
        example: Telegram
        type: string
      appPackageName:
        example: com.example.telegram
        type: string
      dateOfUse:
        example: 24-04-1997
        format: date
        type: string
      timeDuration:
        description: Usage time in seconds.
        type: integer
  CreateAppUsageInput:
    properties:
      appName:
        example: Telegram
        type: string
      appPackageName:
        example: com.example.telegram
        type: string
      dateOfUse:
        example: 24-04-1997
        format: date
        type: string
      timeDuration:
        description: Usage time in seconds.
        type: integer
    required:
      - appName
      - appPackageName
      - dateOfUse 
      - timeDuration
  Room:
    properties:
      id:
        type: string
        format: uuid
      createdAt:
        example: '2009-05-08 14:40:52,531'
        format: date-time
        type: string
      updatedAt:
        example: '2009-05-08 14:40:52,531'
        format: date-time
        type: string
      name:
        example: lula34's room
        type: string
      startTime:
        example: '2009-05-08 14:40:52,531'
        format: date-time
        type: string
      endTime:
        description: Room is ongoing if null.
        example: '2009-05-08 24:40:52,531'
        format: date-time
        type: string
      hostUsername:
        example: lula34
        type: string
      userUsages:
        type: object
        additionalProperties:
          type: integer
parameters:
  roomIdParam:
    in: path
    name: roomID
    type: string
    format: uuid
    required: true
  usernameParam:
    in: path
    name: username
    type: string
    minLength: 5
    required: true
  limitParam:
    name: limit
    required: false
    type: integer
    in: query
    default: 25
    minimum: 0
    description: Number of items to fetch.
  skipParam:
    name: offset
    required: false
    type: integer
    in: query
    default: 0
    minimum: 0
    description: Number of items to skip.
responses:
  ServerError:
    description: Server error.
    schema:
      properties:
        message:
          type: string
  Conflict:
    description: Field occupied.
    schema:
      properties:
        field:
          type: string
  NotFound:
    description: Entity not found.
    schema:
      properties:
        entity:
          type: string
          description: May be null.
        identifer:
          description: May be null.
          type: string
  BadInput:
    description: Illegal input for operation.
    schema:
      properties:
        message:
          type: string
  
x-components: {}
